What is External Secrets Operator (ESO)?

External Secrets Operator (ESO) is a Kubernetes operator designed to enhance the secure and scalable management of secrets. Its primary function involves synchronizing secrets from external secret management systems, which can include popular platforms like HashiCorp Vault, AWS Secrets Manager, and Google Secret Manager, into Kubernetes secrets. This integration enables the secure storage of sensitive information within a centralized repository, offering controlled and secure access for your applications.

Architecture:
The architecture of the External Secrets Operator enhances Kubernetes functionality through the introduction of Custom Resources. These Custom Resources play a pivotal role in specifying the location and synchronization methods for secrets. The operator operates via a controller that interfaces with an external API to fetch secrets, and it subsequently generates Kubernetes secrets based on this external data. Importantly, the controller continually monitors the external API for changes in secrets, ensuring that the Kubernetes cluster's secrets stay synchronized and up-to-date through automatic reconciliation.

Core Resources:
The core resources of the External Secrets Operator typically include the following:
Provider: In External Secrets Operator (ESO), a "Provider" is a Kubernetes custom resource that outlines the configuration for ESO's interactions with an external secret management system.
SecretStore: Provider-specific configurations are established through SecretStore, which operates within a specific namespace. Each SecretStore is dedicated to a singular instance of an external API.
ClusterSecretStore: The ClusterSecretStore is a SecretStore scoped to the entire cluster, accessible by all ExternalSecrets across namespaces. It serves as a centralized access point to your secret backend.
ExternalSecret: An ExternalSecret defines which data to retrieve, specifies the transformation process, and outlines how it should be saved as a Kubernetes Secret with the Kind attribute.

External Secrets Operator(ESO) in action:

Authentication:
When it comes to authentication with GCP, you have two primary options to choose from: Workload Identity and GCP Service Account.

Utilizing Workload Identity:

Set up workload identity resources for ESO

export GCP_PROJECT_ID="your-project-name
export ESO_GCP_SERVICE_ACCOUNT=external-secrets

Set up workload identity resources for ESO:
#Create GCP service account
gcloud iam service-accounts create $ESO_GCP_SERVICE_ACCOUNT \
--project=$GCP_PROJECT_ID

#Create IAM role bindings
gcloud projects add-iam-policy-binding $GCP_PROJECT_ID \
--member "serviceAccount:$ESO_GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com" \
--role "roles/secretmanager.secretAccessor"

Install External Secrets Operator(ESO)
helm repo add external-secrets https://charts.external-secrets.io

helm upgrade -install external-secrets external-secrets/external-secrets \
    --set 'serviceAccount.annotations.iam\.gke\.io\/gcp-service-account'="$ESO_GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com" \
    --namespace external-secrets \
    --create-namespace \
    --debug \
    --wait

Verity ESO installation:
kubectl get all -n external-secrets

Set up a sample secret in GCP secret manager:
printf "user-name=user1" | gcloud secrets create eso-demo --data-file=- --project=$GCP_PROJECT_ID

Setup ClusterSecretStore for GCP secret manager:

cat <<EOF | kubectl apply -f -
---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: gcp-store
spec:
  provider:
    gcpsm:
      projectID: $GCP_PROJECT_ID
EOF

Create ExternalSecret to fetch the data from GCP secret manager:
cat <<EOF | kubectl apply -f -
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: eso-demo-credential
  namespace: ad0000xxxx
spec:
  refreshInterval: 10s             # rate SecretManager pulls GCPSM, Low refereshInternval for demo purpose,Set this value based on your requirement to limit the number of API calls to GCP Secret Manager.
  secretStoreRef:
    kind: ClusterSecretStore
    name: gcp-store               # name of the ClusterSecretStore (or kind specified)
  target:
    name: eso-demo-credential    # name of the k8s Secret to be created in target namespace, ad0000xxxx
    creationPolicy: Owner
  data:
  - secretKey: name
    remoteRef:
      key: eso-demo      # name of the GCPSM secret key
EOF

Verify the secrets in ad0000xxxx namespace:
kubectl get secret secret-to-be-created -n ad0000xxxx -o jsonpath='{.data.dev-secret-test}' | base64 -d

Add a new version to the existing GCP secret:

printf "name=eso-demo-v2" | gcloud secrets versions add eso-demo --data-file=- --project=$GCP_PROJECT_ID
kubectl get secret secret-to-be-created -n ad0000xxxx -o jsonpath='{.data.dev-secret-test}' | base64 -d

GCP Service Account authentication:
Authentication with GCP is achieved through a Service Account, which utilizes static, persistent credentials stored as a JSON key within a Kubernetes Secret. ESO leverages this Secret for GCP authentication. To configure it, establish a GCP Service Account, and assign the "Secret Manager Secret Accessor" role.

apiVersion: v1
kind: Secret
metadata:
  name: gcpsm-secret
  labels:
    type: gcpsm
type: Opaque
stringData:
  secret-access-credentials: |-
    {
      "type": "service_account",
      "project_id": "external-secrets-operator",
      "private_key_id": "",
      "private_key": "-----BEGIN PRIVATE KEY-----\nA key\n-----END PRIVATE KEY-----\n",
      "client_email": "test-service-account@external-secrets-operator.iam.gserviceaccount.com",
      "client_id": "client ID",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test-service-account%40external-secrets-operator.iam.gserviceaccount.com"
    }


